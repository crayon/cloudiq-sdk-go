
/*
 * Crayon Group Customer API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * API version: v1
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type AgreementsApiService service
/*
AgreementsApiService
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *AgreementsApiApiV1AgreementsGetOpts - Optional Parameters:
     * @param "OrganizationId" (optional.Int32) - 
     * @param "OrganizationIds" (optional.Interface of []int32) - 
     * @param "PricelistIds" (optional.Interface of []int32) - 
     * @param "Status" (optional.Interface of AgreementStatus) - 
     * @param "AgreementTypes" (optional.Interface of []AgreementType) - 
     * @param "PublisherIds" (optional.Interface of []int32) - 
     * @param "ProgramIds" (optional.Interface of []int32) - 
     * @param "SearchDate" (optional.Time) - 
     * @param "AgreementIds" (optional.Interface of []int32) - 
     * @param "SalesPriceCurrency" (optional.String) - 
     * @param "TermRequired" (optional.Bool) - 
     * @param "PublisherId" (optional.Int32) - 
     * @param "EndDateFrom" (optional.Time) - 
     * @param "EndDateTo" (optional.Time) - 
     * @param "Page" (optional.Int32) - 
     * @param "PageSize" (optional.Int32) - 
     * @param "Search" (optional.String) - 
@return []Agreement
*/

type AgreementsApiApiV1AgreementsGetOpts struct {
    OrganizationId optional.Int32
    OrganizationIds optional.Interface
    PricelistIds optional.Interface
    Status optional.Interface
    AgreementTypes optional.Interface
    PublisherIds optional.Interface
    ProgramIds optional.Interface
    SearchDate optional.Time
    AgreementIds optional.Interface
    SalesPriceCurrency optional.String
    TermRequired optional.Bool
    PublisherId optional.Int32
    EndDateFrom optional.Time
    EndDateTo optional.Time
    Page optional.Int32
    PageSize optional.Int32
    Search optional.String
}

func (a *AgreementsApiService) ApiV1AgreementsGet(ctx context.Context, localVarOptionals *AgreementsApiApiV1AgreementsGetOpts) ([]Agreement, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue []Agreement
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/Agreements"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.OrganizationId.IsSet() {
		localVarQueryParams.Add("OrganizationId", parameterToString(localVarOptionals.OrganizationId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OrganizationIds.IsSet() {
		localVarQueryParams.Add("OrganizationIds", parameterToString(localVarOptionals.OrganizationIds.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.PricelistIds.IsSet() {
		localVarQueryParams.Add("PricelistIds", parameterToString(localVarOptionals.PricelistIds.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.Status.IsSet() {
		localVarQueryParams.Add("Status", parameterToString(localVarOptionals.Status.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AgreementTypes.IsSet() {
		localVarQueryParams.Add("AgreementTypes", parameterToString(localVarOptionals.AgreementTypes.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.PublisherIds.IsSet() {
		localVarQueryParams.Add("PublisherIds", parameterToString(localVarOptionals.PublisherIds.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.ProgramIds.IsSet() {
		localVarQueryParams.Add("ProgramIds", parameterToString(localVarOptionals.ProgramIds.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.SearchDate.IsSet() {
		localVarQueryParams.Add("SearchDate", parameterToString(localVarOptionals.SearchDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AgreementIds.IsSet() {
		localVarQueryParams.Add("AgreementIds", parameterToString(localVarOptionals.AgreementIds.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.SalesPriceCurrency.IsSet() {
		localVarQueryParams.Add("SalesPriceCurrency", parameterToString(localVarOptionals.SalesPriceCurrency.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TermRequired.IsSet() {
		localVarQueryParams.Add("TermRequired", parameterToString(localVarOptionals.TermRequired.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PublisherId.IsSet() {
		localVarQueryParams.Add("PublisherId", parameterToString(localVarOptionals.PublisherId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EndDateFrom.IsSet() {
		localVarQueryParams.Add("EndDateFrom", parameterToString(localVarOptionals.EndDateFrom.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EndDateTo.IsSet() {
		localVarQueryParams.Add("EndDateTo", parameterToString(localVarOptionals.EndDateTo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Page.IsSet() {
		localVarQueryParams.Add("Page", parameterToString(localVarOptionals.Page.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PageSize.IsSet() {
		localVarQueryParams.Add("PageSize", parameterToString(localVarOptionals.PageSize.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Search.IsSet() {
		localVarQueryParams.Add("Search", parameterToString(localVarOptionals.Search.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v []Agreement
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
