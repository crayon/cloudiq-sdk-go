
/*
 * Crayon Group Customer API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * API version: v1
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"fmt"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type AgreementProductsApiService service
/*
AgreementProductsApiService
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *AgreementProductsApiApiV1AgreementProductsFileXlsxPostOpts - Optional Parameters:
     * @param "Body" (optional.Interface of AgreementProductFilter) - 

*/

type AgreementProductsApiApiV1AgreementProductsFileXlsxPostOpts struct {
    Body optional.Interface
}

func (a *AgreementProductsApiService) ApiV1AgreementProductsFileXlsxPost(ctx context.Context, localVarOptionals *AgreementProductsApiApiV1AgreementProductsFileXlsxPostOpts) (*http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/AgreementProducts/file/xlsx"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/_*+json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.Body.IsSet() {
		
		localVarOptionalBody:= localVarOptionals.Body.Value()
		localVarPostBody = &localVarOptionalBody
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarHttpResponse, err
	}


	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		return localVarHttpResponse, newErr
	}

	return localVarHttpResponse, nil
}
/*
AgreementProductsApiService
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *AgreementProductsApiApiV1AgreementProductsGetOpts - Optional Parameters:
     * @param "AgreementTypeIds" (optional.Interface of []AgreementType) - 
     * @param "Page" (optional.Int32) - 
     * @param "PageSize" (optional.Int32) - 
     * @param "Search" (optional.String) - 
     * @param "PriceListId" (optional.Int32) - 
     * @param "OrganizationId" (optional.Int32) - 
     * @param "CustomerTenantId" (optional.Int32) - 
     * @param "AgreementId" (optional.Int32) - 
     * @param "IsTrial" (optional.Bool) - 
     * @param "IgnoreTermBillingCycleCombinationsCheck" (optional.Bool) - 
     * @param "AgreementIds" (optional.Interface of []int32) - 
     * @param "SearchDate" (optional.Time) - 
     * @param "IncludePartNumbers" (optional.Interface of []string) - 
     * @param "IncludePublisherIds" (optional.Interface of []int32) - 
     * @param "IncludePublisherNames" (optional.Interface of []string) - 
     * @param "IncludePoolNames" (optional.Interface of []string) - 
     * @param "IncludeOperatingSystemNames" (optional.Interface of []string) - 
     * @param "IncludeLevelNames" (optional.Interface of []string) - 
     * @param "IncludeLanguageNames" (optional.Interface of []string) - 
     * @param "IncludeLicenseAgreementTypeNames" (optional.Interface of []string) - 
     * @param "IncludeLicenseTypeNames" (optional.Interface of []string) - 
     * @param "IncludeProductFamilyNames" (optional.Interface of []string) - 
     * @param "IncludeProductTypeNames" (optional.Interface of []string) - 
     * @param "IncludeProgramNames" (optional.Interface of []string) - 
     * @param "IncludeOfferingNames" (optional.Interface of []string) - 
     * @param "IncludePurchasePeriodNames" (optional.Interface of []string) - 
     * @param "IncludePurchaseUnitNames" (optional.Interface of []string) - 
     * @param "IncludeVersionNames" (optional.Interface of []string) - 
     * @param "IncludeRegionNames" (optional.Interface of []string) - 
     * @param "IncludeProductCategoryNames" (optional.Interface of []string) - 
     * @param "IncludeCatalogNames" (optional.Interface of []string) - 
     * @param "IncludeBillingCycles" (optional.Interface of []string) - 
     * @param "ExcludePartNumbers" (optional.Interface of []string) - 
     * @param "ExcludePublisherIds" (optional.Interface of []int32) - 
     * @param "ExcludePublisherNames" (optional.Interface of []string) - 
     * @param "ExcludePoolNames" (optional.Interface of []string) - 
     * @param "ExcludeOperatingSystemNames" (optional.Interface of []string) - 
     * @param "ExcludeLevelNames" (optional.Interface of []string) - 
     * @param "ExcludeLanguageNames" (optional.Interface of []string) - 
     * @param "ExcludeLicenseAgreementTypeNames" (optional.Interface of []string) - 
     * @param "ExcludeLicenseTypeNames" (optional.Interface of []string) - 
     * @param "ExcludeProductFamilyNames" (optional.Interface of []string) - 
     * @param "ExcludeProductTypeNames" (optional.Interface of []string) - 
     * @param "ExcludeProgramNames" (optional.Interface of []string) - 
     * @param "ExcludeOfferingNames" (optional.Interface of []string) - 
     * @param "ExcludePurchasePeriodNames" (optional.Interface of []string) - 
     * @param "ExcludePurchaseUnitNames" (optional.Interface of []string) - 
     * @param "ExcludeVersionNames" (optional.Interface of []string) - 
     * @param "ExcludeRegionNames" (optional.Interface of []string) - 
     * @param "ExcludeProductCategoryNames" (optional.Interface of []string) - 
     * @param "ExcludeCatalogNames" (optional.Interface of []string) - 
     * @param "ExcludeBillingCycles" (optional.Interface of []string) - 
     * @param "SortKey" (optional.String) - 
     * @param "IncludeProductInformation" (optional.Bool) - 
     * @param "SortOrder" (optional.Interface of SortOrder) - 
@return []AgreementProduct
*/

type AgreementProductsApiApiV1AgreementProductsGetOpts struct {
    AgreementTypeIds optional.Interface
    Page optional.Int32
    PageSize optional.Int32
    Search optional.String
    PriceListId optional.Int32
    OrganizationId optional.Int32
    CustomerTenantId optional.Int32
    AgreementId optional.Int32
    IsTrial optional.Bool
    IgnoreTermBillingCycleCombinationsCheck optional.Bool
    AgreementIds optional.Interface
    SearchDate optional.Time
    IncludePartNumbers optional.Interface
    IncludePublisherIds optional.Interface
    IncludePublisherNames optional.Interface
    IncludePoolNames optional.Interface
    IncludeOperatingSystemNames optional.Interface
    IncludeLevelNames optional.Interface
    IncludeLanguageNames optional.Interface
    IncludeLicenseAgreementTypeNames optional.Interface
    IncludeLicenseTypeNames optional.Interface
    IncludeProductFamilyNames optional.Interface
    IncludeProductTypeNames optional.Interface
    IncludeProgramNames optional.Interface
    IncludeOfferingNames optional.Interface
    IncludePurchasePeriodNames optional.Interface
    IncludePurchaseUnitNames optional.Interface
    IncludeVersionNames optional.Interface
    IncludeRegionNames optional.Interface
    IncludeProductCategoryNames optional.Interface
    IncludeCatalogNames optional.Interface
    IncludeBillingCycles optional.Interface
    ExcludePartNumbers optional.Interface
    ExcludePublisherIds optional.Interface
    ExcludePublisherNames optional.Interface
    ExcludePoolNames optional.Interface
    ExcludeOperatingSystemNames optional.Interface
    ExcludeLevelNames optional.Interface
    ExcludeLanguageNames optional.Interface
    ExcludeLicenseAgreementTypeNames optional.Interface
    ExcludeLicenseTypeNames optional.Interface
    ExcludeProductFamilyNames optional.Interface
    ExcludeProductTypeNames optional.Interface
    ExcludeProgramNames optional.Interface
    ExcludeOfferingNames optional.Interface
    ExcludePurchasePeriodNames optional.Interface
    ExcludePurchaseUnitNames optional.Interface
    ExcludeVersionNames optional.Interface
    ExcludeRegionNames optional.Interface
    ExcludeProductCategoryNames optional.Interface
    ExcludeCatalogNames optional.Interface
    ExcludeBillingCycles optional.Interface
    SortKey optional.String
    IncludeProductInformation optional.Bool
    SortOrder optional.Interface
}

func (a *AgreementProductsApiService) ApiV1AgreementProductsGet(ctx context.Context, localVarOptionals *AgreementProductsApiApiV1AgreementProductsGetOpts) ([]AgreementProduct, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue []AgreementProduct
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/AgreementProducts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.AgreementTypeIds.IsSet() {
		localVarQueryParams.Add("AgreementTypeIds", parameterToString(localVarOptionals.AgreementTypeIds.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.Page.IsSet() {
		localVarQueryParams.Add("Page", parameterToString(localVarOptionals.Page.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PageSize.IsSet() {
		localVarQueryParams.Add("PageSize", parameterToString(localVarOptionals.PageSize.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Search.IsSet() {
		localVarQueryParams.Add("Search", parameterToString(localVarOptionals.Search.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PriceListId.IsSet() {
		localVarQueryParams.Add("PriceListId", parameterToString(localVarOptionals.PriceListId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OrganizationId.IsSet() {
		localVarQueryParams.Add("OrganizationId", parameterToString(localVarOptionals.OrganizationId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CustomerTenantId.IsSet() {
		localVarQueryParams.Add("CustomerTenantId", parameterToString(localVarOptionals.CustomerTenantId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AgreementId.IsSet() {
		localVarQueryParams.Add("AgreementId", parameterToString(localVarOptionals.AgreementId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IsTrial.IsSet() {
		localVarQueryParams.Add("IsTrial", parameterToString(localVarOptionals.IsTrial.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IgnoreTermBillingCycleCombinationsCheck.IsSet() {
		localVarQueryParams.Add("IgnoreTermBillingCycleCombinationsCheck", parameterToString(localVarOptionals.IgnoreTermBillingCycleCombinationsCheck.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AgreementIds.IsSet() {
		localVarQueryParams.Add("AgreementIds", parameterToString(localVarOptionals.AgreementIds.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.SearchDate.IsSet() {
		localVarQueryParams.Add("SearchDate", parameterToString(localVarOptionals.SearchDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IncludePartNumbers.IsSet() {
		localVarQueryParams.Add("Include.PartNumbers", parameterToString(localVarOptionals.IncludePartNumbers.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.IncludePublisherIds.IsSet() {
		localVarQueryParams.Add("Include.PublisherIds", parameterToString(localVarOptionals.IncludePublisherIds.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.IncludePublisherNames.IsSet() {
		localVarQueryParams.Add("Include.PublisherNames", parameterToString(localVarOptionals.IncludePublisherNames.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.IncludePoolNames.IsSet() {
		localVarQueryParams.Add("Include.PoolNames", parameterToString(localVarOptionals.IncludePoolNames.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.IncludeOperatingSystemNames.IsSet() {
		localVarQueryParams.Add("Include.OperatingSystemNames", parameterToString(localVarOptionals.IncludeOperatingSystemNames.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.IncludeLevelNames.IsSet() {
		localVarQueryParams.Add("Include.LevelNames", parameterToString(localVarOptionals.IncludeLevelNames.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.IncludeLanguageNames.IsSet() {
		localVarQueryParams.Add("Include.LanguageNames", parameterToString(localVarOptionals.IncludeLanguageNames.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.IncludeLicenseAgreementTypeNames.IsSet() {
		localVarQueryParams.Add("Include.LicenseAgreementTypeNames", parameterToString(localVarOptionals.IncludeLicenseAgreementTypeNames.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.IncludeLicenseTypeNames.IsSet() {
		localVarQueryParams.Add("Include.LicenseTypeNames", parameterToString(localVarOptionals.IncludeLicenseTypeNames.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.IncludeProductFamilyNames.IsSet() {
		localVarQueryParams.Add("Include.ProductFamilyNames", parameterToString(localVarOptionals.IncludeProductFamilyNames.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.IncludeProductTypeNames.IsSet() {
		localVarQueryParams.Add("Include.ProductTypeNames", parameterToString(localVarOptionals.IncludeProductTypeNames.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.IncludeProgramNames.IsSet() {
		localVarQueryParams.Add("Include.ProgramNames", parameterToString(localVarOptionals.IncludeProgramNames.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.IncludeOfferingNames.IsSet() {
		localVarQueryParams.Add("Include.OfferingNames", parameterToString(localVarOptionals.IncludeOfferingNames.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.IncludePurchasePeriodNames.IsSet() {
		localVarQueryParams.Add("Include.PurchasePeriodNames", parameterToString(localVarOptionals.IncludePurchasePeriodNames.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.IncludePurchaseUnitNames.IsSet() {
		localVarQueryParams.Add("Include.PurchaseUnitNames", parameterToString(localVarOptionals.IncludePurchaseUnitNames.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.IncludeVersionNames.IsSet() {
		localVarQueryParams.Add("Include.VersionNames", parameterToString(localVarOptionals.IncludeVersionNames.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.IncludeRegionNames.IsSet() {
		localVarQueryParams.Add("Include.RegionNames", parameterToString(localVarOptionals.IncludeRegionNames.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.IncludeProductCategoryNames.IsSet() {
		localVarQueryParams.Add("Include.ProductCategoryNames", parameterToString(localVarOptionals.IncludeProductCategoryNames.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.IncludeCatalogNames.IsSet() {
		localVarQueryParams.Add("Include.CatalogNames", parameterToString(localVarOptionals.IncludeCatalogNames.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.IncludeBillingCycles.IsSet() {
		localVarQueryParams.Add("Include.BillingCycles", parameterToString(localVarOptionals.IncludeBillingCycles.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.ExcludePartNumbers.IsSet() {
		localVarQueryParams.Add("Exclude.PartNumbers", parameterToString(localVarOptionals.ExcludePartNumbers.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.ExcludePublisherIds.IsSet() {
		localVarQueryParams.Add("Exclude.PublisherIds", parameterToString(localVarOptionals.ExcludePublisherIds.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.ExcludePublisherNames.IsSet() {
		localVarQueryParams.Add("Exclude.PublisherNames", parameterToString(localVarOptionals.ExcludePublisherNames.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.ExcludePoolNames.IsSet() {
		localVarQueryParams.Add("Exclude.PoolNames", parameterToString(localVarOptionals.ExcludePoolNames.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.ExcludeOperatingSystemNames.IsSet() {
		localVarQueryParams.Add("Exclude.OperatingSystemNames", parameterToString(localVarOptionals.ExcludeOperatingSystemNames.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.ExcludeLevelNames.IsSet() {
		localVarQueryParams.Add("Exclude.LevelNames", parameterToString(localVarOptionals.ExcludeLevelNames.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.ExcludeLanguageNames.IsSet() {
		localVarQueryParams.Add("Exclude.LanguageNames", parameterToString(localVarOptionals.ExcludeLanguageNames.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.ExcludeLicenseAgreementTypeNames.IsSet() {
		localVarQueryParams.Add("Exclude.LicenseAgreementTypeNames", parameterToString(localVarOptionals.ExcludeLicenseAgreementTypeNames.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.ExcludeLicenseTypeNames.IsSet() {
		localVarQueryParams.Add("Exclude.LicenseTypeNames", parameterToString(localVarOptionals.ExcludeLicenseTypeNames.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.ExcludeProductFamilyNames.IsSet() {
		localVarQueryParams.Add("Exclude.ProductFamilyNames", parameterToString(localVarOptionals.ExcludeProductFamilyNames.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.ExcludeProductTypeNames.IsSet() {
		localVarQueryParams.Add("Exclude.ProductTypeNames", parameterToString(localVarOptionals.ExcludeProductTypeNames.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.ExcludeProgramNames.IsSet() {
		localVarQueryParams.Add("Exclude.ProgramNames", parameterToString(localVarOptionals.ExcludeProgramNames.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.ExcludeOfferingNames.IsSet() {
		localVarQueryParams.Add("Exclude.OfferingNames", parameterToString(localVarOptionals.ExcludeOfferingNames.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.ExcludePurchasePeriodNames.IsSet() {
		localVarQueryParams.Add("Exclude.PurchasePeriodNames", parameterToString(localVarOptionals.ExcludePurchasePeriodNames.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.ExcludePurchaseUnitNames.IsSet() {
		localVarQueryParams.Add("Exclude.PurchaseUnitNames", parameterToString(localVarOptionals.ExcludePurchaseUnitNames.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.ExcludeVersionNames.IsSet() {
		localVarQueryParams.Add("Exclude.VersionNames", parameterToString(localVarOptionals.ExcludeVersionNames.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.ExcludeRegionNames.IsSet() {
		localVarQueryParams.Add("Exclude.RegionNames", parameterToString(localVarOptionals.ExcludeRegionNames.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.ExcludeProductCategoryNames.IsSet() {
		localVarQueryParams.Add("Exclude.ProductCategoryNames", parameterToString(localVarOptionals.ExcludeProductCategoryNames.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.ExcludeCatalogNames.IsSet() {
		localVarQueryParams.Add("Exclude.CatalogNames", parameterToString(localVarOptionals.ExcludeCatalogNames.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.ExcludeBillingCycles.IsSet() {
		localVarQueryParams.Add("Exclude.BillingCycles", parameterToString(localVarOptionals.ExcludeBillingCycles.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.SortKey.IsSet() {
		localVarQueryParams.Add("SortKey", parameterToString(localVarOptionals.SortKey.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IncludeProductInformation.IsSet() {
		localVarQueryParams.Add("IncludeProductInformation", parameterToString(localVarOptionals.IncludeProductInformation.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SortOrder.IsSet() {
		localVarQueryParams.Add("SortOrder", parameterToString(localVarOptionals.SortOrder.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v []AgreementProduct
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
AgreementProductsApiService
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param partNumber
 * @param optional nil or *AgreementProductsApiApiV1AgreementProductsPartNumberSupportedbillingcyclesGetOpts - Optional Parameters:
     * @param "ResellerCustomerId" (optional.Int32) - 
@return []BillingCycleEnum
*/

type AgreementProductsApiApiV1AgreementProductsPartNumberSupportedbillingcyclesGetOpts struct {
    ResellerCustomerId optional.Int32
}

func (a *AgreementProductsApiService) ApiV1AgreementProductsPartNumberSupportedbillingcyclesGet(ctx context.Context, partNumber string, localVarOptionals *AgreementProductsApiApiV1AgreementProductsPartNumberSupportedbillingcyclesGetOpts) ([]BillingCycleEnum, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue []BillingCycleEnum
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/AgreementProducts/{partNumber}/supportedbillingcycles"
	localVarPath = strings.Replace(localVarPath, "{"+"partNumber"+"}", fmt.Sprintf("%v", partNumber), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.ResellerCustomerId.IsSet() {
		localVarQueryParams.Add("resellerCustomerId", parameterToString(localVarOptionals.ResellerCustomerId.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v []BillingCycleEnum
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
AgreementProductsApiService
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *AgreementProductsApiApiV1AgreementProductsPostOpts - Optional Parameters:
     * @param "Body" (optional.Interface of AgreementProductFilter) - 
@return []AgreementProduct
*/

type AgreementProductsApiApiV1AgreementProductsPostOpts struct {
    Body optional.Interface
}

func (a *AgreementProductsApiService) ApiV1AgreementProductsPost(ctx context.Context, localVarOptionals *AgreementProductsApiApiV1AgreementProductsPostOpts) ([]AgreementProduct, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue []AgreementProduct
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/AgreementProducts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/_*+json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.Body.IsSet() {
		
		localVarOptionalBody:= localVarOptionals.Body.Value()
		localVarPostBody = &localVarOptionalBody
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v []AgreementProduct
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
